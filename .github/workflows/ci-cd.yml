name: 🧠 Wavefunction Approximation - CI/CD Pipeline

on:
  push:
    branches:
      - '**'   
  pull_request:
    branches:
      - '**'  

jobs:
  build:
    name: 🛠 Build Environment
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nbconvert nbformat pytest black isort flake8

  test:
    name: ✅ Lint & Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install Test Tools
        run: |
          pip install -r requirements.txt
          pip install black isort flake8 pytest

      - name: 🔍 Lint Code
        run: |
          if [ -d "src" ]; then
            black --check src/
            isort --check-only src/
            flake8 src/
          else
            echo "⚠️ 'src/' folder not found. Skipping lint for src."
          fi

          if [ -d "notebooks" ]; then
            black --check notebooks/
            isort --check-only notebooks/
            flake8 notebooks/
          else
            echo "⚠️ 'notebooks/' folder not found. Skipping lint for notebooks."
          fi


      - name: 🧪 Run Unit Tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/
          else
            echo "No tests found. Skipping."
          fi

      - name: 🧠 Execute Core Notebook
        run: |
          if compgen -G "notebooks/*.ipynb" > /dev/null; then
            for nb in notebooks/*.ipynb; do
              echo "🚀 Executing notebook: $nb"
              jupyter nbconvert --to notebook --execute "$nb" --output "executed_$(basename "$nb")"
            done
          else
            echo "⚠️ No notebooks found in notebooks/. Skipping execution."
          fi

  deploy:
    nname: 🚀 Deploy Models
    runs-on: ubuntu-latest
    needs: test
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' ||
       github.ref == 'refs/heads/dev' ||
       github.ref == 'refs/heads/staging')
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install Dependencies
        run: |
          pip install tensorflow huggingface_hub

      - name: 🤖 Check if Model Exists
        id: check_model
        run: |
          if compgen -G "models/*.keras" > /dev/null || compgen -G "models/*.h5" > /dev/null; then
            echo "✅ Model files found. Proceeding to upload."
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "⚠️ No model found in models/. Skipping deployment."
            echo "found=false" >> "$GITHUB_OUTPUT"

      - name: 🚀 Upload to Hugging Face
        if: steps.check_model.outputs.found == 'true'
        env:
          HF_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
        run: |
          HF_REPO="jobet1130/wavefunction-models"

          echo "🔐 Logging in to Hugging Face CLI"
          huggingface-cli login --token "$HF_TOKEN"

          echo "📂 Creating or updating Hugging Face model repo: $HF_REPO"
          huggingface-cli repo create $HF_REPO --type=model --exist-ok

          echo "📤 Uploading model(s)..."
          huggingface-cli upload $HF_REPO models/* --repo-type model --token "$HF_TOKEN"

      - name: 📤 Upload Deployment Artifacts
        if: steps.check_model.outputs.found == 'true'
        run: |
          mkdir -p deployment_output
          echo "🚀 Environment: ${{ github.ref_name }}" > deployment_output/info.txt
          echo "📦 Model Hash: $(git rev-parse HEAD)" >> deployment_output/info.txt
          echo "🕒 Date: $(date)" >> deployment_output/info.txt
        shell: bash

      - name: 🗃 Archive Logs
        if: steps.check_model.outputs.found == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: model-${{ github.ref_name }}
          path: deployment_output/